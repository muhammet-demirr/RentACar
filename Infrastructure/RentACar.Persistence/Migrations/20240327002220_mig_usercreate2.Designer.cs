// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RentACar.Persistence.Context;

#nullable disable

namespace RentACar.Persistence.Migrations
{
    [DbContext(typeof(RentACarPsqlDbContext))]
    [Migration("20240327002220_mig_usercreate2")]
    partial class mig_usercreate2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RentACar.Domain.Models.BaseModels.BaseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedUser")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("RentACar.Domain.Models.About", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Abouts");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Car", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("CarModel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CarPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CarYear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Depozit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Door")
                        .HasColumnType("int");

                    b.Property<string>("DrivingLicense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FuelType")
                        .HasColumnType("int");

                    b.Property<bool>("IsAc")
                        .HasColumnType("bit");

                    b.Property<string>("Luggage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Person")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalKm")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("gear")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("RentACar.Domain.Models.CarLocation", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CarId");

                    b.HasIndex("LocationId");

                    b.ToTable("CarLocations");
                });

            modelBuilder.Entity("RentACar.Domain.Models.CarOption", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOption")
                        .HasColumnType("bit");

                    b.Property<int?>("OptionCount")
                        .HasColumnType("int");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CarId");

                    b.HasIndex("OptionId");

                    b.ToTable("CarOptions");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Location", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Option", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("OpsiyonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpsiyonPrice")
                        .HasColumnType("decimal(18,2)");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Partner", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PartnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Reservation", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<decimal?>("AdditionalProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ArrivalFlightNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EndLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentityNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("RentPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReturnFlightNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StartLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("CarId");

                    b.HasIndex("EndLocationId");

                    b.HasIndex("StartLocationId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("RentACar.Domain.Models.ReservationOption", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<int?>("OptionCount")
                        .HasColumnType("int");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("TotalOptionPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasIndex("OptionId");

                    b.HasIndex("ReservationId");

                    b.ToTable("ReservationOptions");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Service", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("RentACar.Domain.Models.User", b =>
                {
                    b.HasBaseType("RentACar.Domain.Models.BaseModels.BaseModel");

                    b.Property<string>("EMailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("822e044b-5656-4b44-ad0f-01d7761e2cbe"),
                            CreateDate = new DateTime(2024, 3, 27, 3, 22, 20, 519, DateTimeKind.Local).AddTicks(190),
                            CreatedUser = "Admin",
                            EMailAddress = "icb1742@gmail.com",
                            FirstName = "Süper",
                            IsActive = true,
                            LastName = "Admin",
                            Password = "17421742"
                        },
                        new
                        {
                            Id = new Guid("c326ee05-4878-4219-958d-ad3caefa4e11"),
                            CreateDate = new DateTime(2024, 3, 27, 3, 22, 20, 519, DateTimeKind.Local).AddTicks(303),
                            CreatedUser = "Admin",
                            EMailAddress = "eagledenizcilik@outlook.com.tr",
                            FirstName = "Alican",
                            IsActive = true,
                            LastName = "Kartal",
                            Password = "Eagle0204."
                        });
                });

            modelBuilder.Entity("RentACar.Domain.Models.CarLocation", b =>
                {
                    b.HasOne("RentACar.Domain.Models.Car", "Car")
                        .WithMany("CarLocations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentACar.Domain.Models.Location", "Location")
                        .WithMany("CarLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RentACar.Domain.Models.CarOption", b =>
                {
                    b.HasOne("RentACar.Domain.Models.Car", "Car")
                        .WithMany("CarOptions")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentACar.Domain.Models.Option", "Option")
                        .WithMany("CarOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Reservation", b =>
                {
                    b.HasOne("RentACar.Domain.Models.Car", "Car")
                        .WithMany("Reservations")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentACar.Domain.Models.Location", "EndLocation")
                        .WithMany("EndLocations")
                        .HasForeignKey("EndLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentACar.Domain.Models.Location", "StartLocation")
                        .WithMany("StartLocations")
                        .HasForeignKey("StartLocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("EndLocation");

                    b.Navigation("StartLocation");
                });

            modelBuilder.Entity("RentACar.Domain.Models.ReservationOption", b =>
                {
                    b.HasOne("RentACar.Domain.Models.Option", "Option")
                        .WithMany("ReservationOptions")
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RentACar.Domain.Models.Reservation", "Reservation")
                        .WithMany("ReservationOptions")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Car", b =>
                {
                    b.Navigation("CarLocations");

                    b.Navigation("CarOptions");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Location", b =>
                {
                    b.Navigation("CarLocations");

                    b.Navigation("EndLocations");

                    b.Navigation("StartLocations");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Option", b =>
                {
                    b.Navigation("CarOptions");

                    b.Navigation("ReservationOptions");
                });

            modelBuilder.Entity("RentACar.Domain.Models.Reservation", b =>
                {
                    b.Navigation("ReservationOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
