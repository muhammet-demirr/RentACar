@page "/admin/partners"
@using Blazored.LocalStorage
@using RentACar.Application.CustomExceptions
@using RentACar.Application.DTOs
@using RentACar.Client.Utils
@layout MainAdminLayout
<RadzenButton Shade="Shade.Dark" Click=goCreatePartnerPage Icon="add" Variant="Variant.Flat" Text="Referans Ekle" ButtonStyle="ButtonStyle.Success" />
@if (Partners is not null)
{
    <RadzenDataGrid AllowFiltering="true"
                    FilterMode="FilterMode.Simple"
                    ShowCellDataAsTooltip="true"
                    ColumnWidth="200px"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowColumnPicking="true"
                    AllowPaging="true" PageSize="10"
                    AllowSorting="true" Data="@Partners"
                    TItem="PartnerDTO">
        <Columns>
            <RadzenDataGridColumn TItem="PartnerDTO" Context="partner" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="partner">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(() => goUpdatePartnerPage(partner.Id))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => DeletePartner(partner.Id))">
                    </RadzenButton>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="PartnerDTO" Title="Resim" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenImage Path="@data.Image" class="rz-gravatar" />
                </Template>
            </RadzenDataGridColumn>
            

            <RadzenDataGridColumn TItem="PartnerDTO" Property="PartnerName" Title="Referans İsmi" />
        </Columns>
    </RadzenDataGrid>
}
@code {
    [Inject]
    public HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    ILocalStorageService localStorageService { get; set; }

    protected IEnumerable<PartnerDTO> Partners;
    protected override async Task OnInitializedAsync()
    {
        await LoadList();

    }
    protected async Task LoadList()
    {
        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            Partners = await Client.GetServiceResponseAsync<List<PartnerDTO>>("/api/Partner/Partners", token);
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {

            await ModalManager.ShowMessageAsync("Exception Exception", ex.Message);
        }
    }
    protected void goCreatePartnerPage()
    {
        NavigationManager.NavigateTo("/admin/partners/add");
    }
    protected void goUpdatePartnerPage(Guid Id)
    {
        NavigationManager.NavigateTo("/admin/partners/edit/" + Id);
    }
    protected async Task DeletePartner(Guid Id)
    {
        bool confirmed = await ModalManager.ConfirmationAsync("Silme İşlemi", "Referansı silmek istediğinize eminmisiniz ?");
        if (!confirmed) return;
        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            bool deleted = await Client.PostGetServiceResponseAsync<bool, Guid>("/api/Partner/Delete", Id, token);
            if (deleted)
            {
                await ModalManager.ShowMessageAsync("Bildirim", "Silme İşlemi Tamamlandı", 4);
                NavigationManager.NavigateTo("/admin/partners", true);
            }
            else
            {
                await ModalManager.ShowMessageAsync("Bildirim", "Silme İşlemi Tamamlanamadı!!!!!!", 7);
            }
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {

            await ModalManager.ShowMessageAsync("Exception", ex.Message);
        }
    }

}
