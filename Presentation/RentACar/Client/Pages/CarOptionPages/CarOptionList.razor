@page "/admin/CarOptions"
@using Blazored.LocalStorage
@using RentACar.Application.CustomExceptions
@using RentACar.Application.DTOs
@using RentACar.Client.Utils
@using RentACar.Domain.Models
@layout MainAdminLayout

<RadzenButton Shade="Shade.Dark" Click=goCreateCarOptionPage Icon="add" Variant="Variant.Flat" Text="Araba Seçeneği Ekle" ButtonStyle="ButtonStyle.Success" />


<RadzenDataGrid AllowFiltering="true"
                FilterMode="FilterMode.Simple"
                ShowCellDataAsTooltip="true"
                ColumnWidth="200px"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowColumnPicking="true"
                AllowPaging="true" PageSize="10"
                AllowSorting="true" Data="@CarOptions"
                TItem="CarOptionDTO">
    <Columns>
        <RadzenDataGridColumn TItem="CarOptionDTO" Context="carOption" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="carOption">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(() => goUpdateCarOptionPage(carOption.Id))">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => DeleteCarOption(carOption.Id))">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>

        <RadzenDataGridColumn TItem="CarOptionDTO" Property="CarName" Title="Araba Adı" />

        <RadzenDataGridColumn TItem="CarOptionDTO" Property="CarModel" Title="Modeli" />
        <RadzenDataGridColumn TItem="CarOptionDTO" Property="OptionName" Title="Seçenek İsmi" />

        <RadzenDataGridColumn TItem="CarOptionDTO" Property="OptionPrice" Title="Seçenek Fiyatı" />

    </Columns>
</RadzenDataGrid>


@code {
    [Inject]
    public HttpClient Client { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager NavigationManager { get; set; }
    [Inject]
    ILocalStorageService localStorageService { get; set; }

    protected IEnumerable<CarOptionDTO> CarOptions;


    protected override async Task OnInitializedAsync()
    {
        await LoadList();

    }
    protected async Task LoadList()
    {
        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            CarOptions = await Client.GetServiceResponseAsync<List<CarOptionDTO>>("/api/carOption/carOptions", token);
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {

            await ModalManager.ShowMessageAsync("Exception Exception", ex.Message);
        }
    }
    protected void goCreateCarOptionPage()
    {
        NavigationManager.NavigateTo("/admin/carOptions/add");
    }
    protected void goUpdateCarOptionPage(Guid Id)
    {
        NavigationManager.NavigateTo("/admin/carOptions/edit/" + Id);
    }
    protected async Task DeleteCarOption(Guid Id)
    {
        bool confirmed = await ModalManager.ConfirmationAsync("Silme İşlemi", "Araba Fiyatını silmek istediğinize eminmisiniz ?");
        if (!confirmed) return;
        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            bool deleted = await Client.PostGetServiceResponseAsync<bool, Guid>("/api/CarOption/delete", Id, token);
            if (deleted)
            {
                await ModalManager.ShowMessageAsync("Bildirim", "Silme İşlemi Tamamlandı", 4);
                NavigationManager.NavigateTo("/admin/carOptions", true);
            }
            else
            {
                await ModalManager.ShowMessageAsync("Bildirim", "Silme İşlemi Tamamlanamadı!!!!!!", 7);
            }
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {

            await ModalManager.ShowMessageAsync("Exception", ex.Message);
        }
    }
}