@page "/admin/abouts/add"
@page "/admin/abouts/edit/{AboutId:guid}"
@layout MainAdminLayout
@using Blazored.LocalStorage
@using Morris.Blazor.FluentValidation
@using Morris.Blazor.Validation
@using RentACar.Application.CustomExceptions
@using RentACar.Application.DTOs
@using RentACar.Application.Validators
@using RentACar.Application.Validators
@using RentACar.Client.Utils

<EditForm Model="@about" OnValidSubmit="SubmitForm">
    <Validate ValidationProperties=@(ValidationProperties.Set.FluentValidator<AboutValidator>()) OnTransformModel=OnTransformModel />
    <RadzenColumn Size="12" Style="width:%60" SizeMD="6">
        <RadzenStack>
            <RadzenFieldset Text="Hakkımızda Ekleme Sayfası">
                <RadzenStack Gap="1rem">

                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Başlık" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Style="width: 50%;" @bind-Value="about.Title" Name="Title" />
                            <ValidationMessage For="@(() => about.Title)" />
                        </RadzenColumn>

                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Link" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenTextBox Style="width: 50%;" @bind-Value="about.Link" Name="Link" />
                            <ValidationMessage For="@(() => about.Link)" />
                        </RadzenColumn>
                    </RadzenRow>
                    <RadzenRow AlignItems="AlignItems.Center">
                        <RadzenColumn Size="12" SizeMD="4">
                            <RadzenLabel Text="Hakkımızda" />
                        </RadzenColumn>
                        <RadzenColumn Size="12" SizeMD="8">
                            <RadzenHtmlEditor @bind-Value="about.Text" style="height: 300px;" Input=@OnInput Change=@OnChange Paste=@OnPaste Execute=@OnExecute UploadUrl="upload/image"  />

                            <ValidationMessage For="@(() => about.Text)" />
                        </RadzenColumn>

                    </RadzenRow>
                </RadzenStack>
            </RadzenFieldset>
        </RadzenStack>
    </RadzenColumn>
    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Center" Gap="1rem" Class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Large" Icon="save" Text="Kaydet" />
        <RadzenButton ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Large" Icon="cancel" Text="Geri Dön" Click="@goBackAboutList" />
    </RadzenStack>
</EditForm>
@code {
    [Parameter]
    public Guid AboutId { get; set; }
    [Inject]
    public HttpClient HttpClient { get; set; }

    [Inject]
    public ModalManager ModalManager { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    ILocalStorageService localStorageService { get; set; }
    private AboutDTO about = new AboutDTO();

    protected async override Task OnInitializedAsync()
    {
        try
        {
            string token = await localStorageService.GetItemAsStringAsync("token");
            if (AboutId != null && AboutId != Guid.Empty)
            {
                about = await HttpClient.GetServiceResponseAsync<AboutDTO>("api/about/AboutBy/" + AboutId, token);
            }
        }
        catch(ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {

            await ModalManager.ShowMessageAsync("Exception", ex.Message);
        }
     


    }
    async Task editOrUpdate(AboutDTO aboutDTO)
    {

        try
        {

            String url = "api/about/create";
            about = aboutDTO;
            // Update
            if (AboutId != null && AboutId != Guid.Empty)
            {
                url = "api/about/update";
                about.UpdatedDate = DateTime.Now;
                about.UpdatedUser = await localStorageService.GetItemAsStringAsync("email");
            }
            else
            {
                about.CreateDate = DateTime.Now;
                about.CreatedUser = await localStorageService.GetItemAsStringAsync("email");
            }
            string token = await localStorageService.GetItemAsStringAsync("token");

            about = await HttpClient.PostGetServiceResponseAsync<AboutDTO, AboutDTO>(url, about, token, true);

            NavigationManager.NavigateTo("/admin/carLocations");
        }
        catch (ApiException ex)
        {
            await ModalManager.ShowMessageAsync("Api Exception", ex.Message);
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Exception", ex.Message);
        }




    }
    async Task SubmitForm(EditContext editContext)
    {
        if (editContext.Validate())
        {
            await editOrUpdate((AboutDTO)editContext.Model);
        }
    }
    void goBackAboutList()
    {
        NavigationManager.NavigateTo("/admin/abouts");
    }
    private object OnTransformModel(object model)
    {
        // Confirm that the model is of the expected type
        // Do transformations here
        // return the transformed model
        return model;
    }
    void OnPaste(HtmlEditorPasteEventArgs args)
    {
        Console.WriteLine($"Paste: {args.Html}");
    }

    void OnChange(string html)
    {
        Console.WriteLine($"Change: {html}");
    }

    void OnInput(string html)
    {
        Console.WriteLine($"Input: {html}");
    }

    void OnExecute(HtmlEditorExecuteEventArgs args)
    {
        Console.WriteLine($"Execute: {args.CommandName}");
    }
}
